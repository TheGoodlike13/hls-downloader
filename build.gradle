import java.nio.charset.StandardCharsets
import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardOpenOption

plugins {
    id 'java'
    id 'idea'

    // helps me keep up to date with dependencies
    id "com.github.ben-manes.versions" version "0.15.0"

    // builds fatJar efficiently (much faster than normal)
    id "com.github.johnrengelman.shadow" version "2.0.1"
}

repositories {
    jcenter()
}

dependencies {
    // I DID IT! PRAISE THE REPOSITORY!
    compile 'eu.goodlike:goodlike-utils:0.0.48'

    // used for command line argument parsing
    compile 'net.sourceforge.argparse4j:argparse4j:0.8.1'

    // used for various utility methods
    compile 'com.google.guava:guava:23.1-jre'
    compile 'org.apache.commons:commons-lang3:3.6'
    compile 'commons-io:commons-io:2.5'

    // used for HTTP requests
    compile 'com.squareup.okhttp3:okhttp:3.9.0'
    compile "com.squareup.okhttp3:okhttp-urlconnection:3.9.0"

    // used for parsing HTML
    compile 'org.jsoup:jsoup:1.10.3'

    // cache which supports custom eviction timer
    compile 'org.cache2k:cache2k-api:1.0.1.Final'
    compile 'org.cache2k:cache2k-core:1.0.1.Final'

    // used for JSON conversion
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.9.1'
    compile 'com.fasterxml.jackson.core:jackson-core:2.9.1'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.1'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.9.1'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.1'
    compile 'com.fasterxml.jackson.module:jackson-module-paranamer:2.9.1'

    // logging
    compile 'org.slf4j:slf4j-api:1.7.21'
    compile 'ch.qos.logback:logback-classic:1.2.3'

    // guice
    compile 'com.google.inject:guice:4.1.0'

    // guice assisted inject
    compile 'com.google.inject.extensions:guice-assistedinject:4.1.0'
    compile 'com.google.code.findbugs:jsr305:3.0.2'

    // unit tests
    testCompile 'junit:junit:4.12'
    // better assertions
    testCompile 'org.assertj:assertj-core:3.8.0'
    // mocking various objects
    testCompile 'org.mockito:mockito-all:2.0.2-beta'
}

group 'eu.goodlike'
version '0.9'

task wrapper(type: Wrapper) {
    gradleVersion = '3.1'
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    options.encoding = 'UTF-8'
}

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java", "src/gen/java"]
        }
    }
    test {
        java {
            srcDirs = ["src/test/java", "src/test/spike"]
        }
    }
}

test {
    exclude '**/*Spike*'
}

jar {
    manifest {
        attributes 'Main-Class': 'eu.goodlike.hls.download.HlsDownloaderLauncher'
    }
}

def buildDirectory = "${project.rootDir}\\copy"
def buildLocation = new File(buildDirectory)

shadowJar {
    destinationDir = buildLocation
    baseName = rootProject.name
    classifier = null
    version = project.version
}

task buildBatchFile << {
    def batchFileContents = [
            "@echo off",
            "java -jar \"%~dp0${rootProject.name}-${project.version}.jar\" %*"
    ]

    def batchFileName = 'hlsDL.bat'
    def path = Paths.get(buildDirectory)
    if (Files.notExists(path))
        Files.createDirectory(path)

    Files.write(path.resolve(batchFileName), batchFileContents, StandardCharsets.UTF_8,
            StandardOpenOption.CREATE, StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING)
}

shadowJar.dependsOn buildBatchFile
